---
import Background from "@components/Background.astro";
import Container from "@components/Container.astro";
import LeetCodeDay from "@components/LeetCodeDay.astro";
import NavbarLayout from "@layouts/NavbarLayout.astro";
import type { JSX } from "astro/jsx-runtime";
import { getCollection } from "astro:content";
import * as R from "remeda";

const entries = await getCollection("leetcode");

const groups = R.pipe(
  entries,
  R.groupBy((entry) => entry.data.date.toISOString()),
  R.entries(),
  R.sortBy(([date]) => date),
  R.reverse()
);
---

<NavbarLayout title="LeetCode" description="My LeetCode solutions">
  <Background extraCss="bg-black">
    <Container width="narrow">
      <div class="text-white bg-black mt-6 p-6 rounded-md">
        <h1 class="text-3xl text-white text-center md:text-left mb-1">LeetCode</h1>
        These are my own solutions to LeetCode problems. Note that these solutions aren't all entirely my own, and that I
        often refer to solutions that influence what I come up with.
        <div class="mt-2">
          See <a href="https://leetcode.com/u/jerred/" class="underline hover:no-underline">my LeetCode profile</a>.
        </div>
        <p class="text mt-6 italic">
          "So, if you're finding this question challenging, then you're doing the right thing by working on it now."
        </p>
      </div>
      <div class="flex flex-col gap-12 mt-6 mb-6">
        {R.map(groups, ([date, entries]): JSX.Element => <LeetCodeDay date={new Date(date)} entries={entries} />)}
      </div>
    </Container>
  </Background>
</NavbarLayout>
